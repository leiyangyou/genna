//lint:file-ignore U1000 ignore unused code, it's generated
//nolint
package model

import (
	"context"
	"time"
)

type ColumnsProject struct {
	ID, Name, CreatedAt, UpdatedAt string
}

type ColumnsUser struct {
	ID, Email, Activated, Name, CountryID string
	Country                               string
}

type ColumnsGeoCountry struct {
	ID, Code, Coords string
}

type ColumnsSt struct {
	Project    ColumnsProject
	User       ColumnsUser
	GeoCountry ColumnsGeoCountry
}

var Columns = ColumnsSt{
	Project: ColumnsProject{
		ID:        "projectId",
		Name:      "name",
		CreatedAt: "createdAt",
		UpdatedAt: "updatedAt",
	},
	User: ColumnsUser{
		ID:        "userId",
		Email:     "email",
		Activated: "activated",
		Name:      "name",
		CountryID: "countryId",

		Country: "Country",
	},
	GeoCountry: ColumnsGeoCountry{
		ID:     "countryId",
		Code:   "code",
		Coords: "coords",
	},
}

type TableProject struct {
	Name, Alias string
}

type TableUser struct {
	Name, Alias string
}

type TableGeoCountry struct {
	Name, Alias string
}

type TablesSt struct {
	Project    TableProject
	User       TableUser
	GeoCountry TableGeoCountry
}

var Tables = TablesSt{
	Project: TableProject{
		Name:  "projects",
		Alias: "t",
	},
	User: TableUser{
		Name:  "users",
		Alias: "t",
	},
	GeoCountry: TableGeoCountry{
		Name:  "geo.countries",
		Alias: "t",
	},
}

type Project struct {
	tableName struct{} `sql:"projects,alias:t" pg:",discard_unknown_columns"`

	ID        int       `sql:"projectId,pk"`
	Name      string    `sql:"name,notnull"`
	CreatedAt time.Time `sql:"createdAt,notnull,,default:now()"`
	UpdatedAt time.Time `sql:"updatedAt,notnull,,default:now()"`
}

type User struct {
	tableName struct{} `sql:"users,alias:t" pg:",discard_unknown_columns"`

	ID        int     `sql:"userId,pk"`
	Email     string  `sql:"email,notnull"`
	Activated bool    `sql:"activated,notnull"`
	Name      *string `sql:"name"`
	CountryID *int    `sql:"countryId"`

	Country *GeoCountry `pg:"fk:countryId"`
}

type GeoCountry struct {
	tableName struct{} `sql:"geo.countries,alias:t" pg:",discard_unknown_columns"`

	ID     int    `sql:"countryId,pk"`
	Code   string `sql:"code,notnull"`
	Coords []int  `sql:"coords,array"`
}

func (m *Project) BeforeUpdate(ctx context.Context, db orm.DB) error {
	m.UpdatedAt = time.Now()
	return nil
}
